#!/usr/bin/python

import ram.context
import ram.widgets


with ram.context(__name__):
    from wiz.utils import ParseBytes
    from .entry import RunMkPartDiskDrive


def __ParsePartitioningScheme(filename):
    try:
        filetext = open(filename).readlines()
    except Exception as e:
        raise SystemExit("Can't open scheme file: %s" % e)

    scheme = []
    for line in filetext:
        tokens = line.split()
        if not tokens or tokens[0].startswith("#"):
            continue
        if len(tokens) < 2:
            raise SystemExit("Can't parse scheme line:\n  %s" % line)
        if len(tokens) > 2 and not tokens[2].startswith("#"):
            raise SystemExit("Can't parse scheme line:\n  %s" % line)

        size, flex, fs = tokens[0].rstrip("~"), tokens[0].endswith("~"), tokens[1]

        try:
            size = ParseBytes(size)
            scheme.append((size * (-1 if flex else 1), fs))
        except Exception as e:
            raise SystemExit("Can't parse scheme line. %s:\n  %s" % (e, line))

    if not scheme:
        raise SystemExit("Scheme is empty.")

    return scheme


if __name__ == '__main__':
    params = ram.param()

    if not params.scheme:
        raise SystemExit("mandatory argument `scheme` is omitted.")

    scheme = __ParsePartitioningScheme(params.scheme)

    device = RunMkPartDiskDrive(scheme, dev_path=params.device).__call__()

    if not device:
        raise SystemExit("No disks were selected.")
    elif params.file:
        print >> open(params.file, 'w'), device
    else:
        print device
